from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import CallbackContext
from spotipy import Spotify
from spotipy.oauth2 import SpotifyClientCredentials
from data.config import SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET
from telegram import Update
from data import user_data
from handlers.menu import menu  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Spotify
spotify = Spotify(auth_manager=SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID, client_secret=SPOTIFY_CLIENT_SECRET))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∂–∞–Ω—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_user_genres(user_id):
    user_data_dict = user_data.get_all_user_data()
    return user_data_dict.get(str(user_id), {}).get("genres", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Spotify API
def fetch_spotify_recommendations(user_genres, limit=10):
    recommendations = spotify.recommendations(seed_genres=user_genres, limit=limit)
    tracks = []
    for track in recommendations['tracks']:
        if track['preview_url']:
            tracks.append({
                "title": track['name'],
                "artist": track['artists'][0]['name'],
                "cover": track['album']['images'][0]['url'] if track['album']['images'] else None,
                "snippet": track['preview_url'],
                "spotify": track['external_urls']['spotify']
            })
    return tracks

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∂–∞–Ω—Ä–æ–≤
async def get_recommendation(update: Update, context: CallbackContext, edit_message=False):
    if update.message:
        chat = update.message
    elif update.callback_query:
        chat = update.callback_query.message
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    user_data.set_state(user_id, "in_recommendations")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    user_genres = load_user_genres(user_id)

    if not user_genres:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        await chat.reply_text(message)
        await menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
        return

    tracks = fetch_spotify_recommendations(user_genres, limit=10)
    track = next((t for t in tracks if t["snippet"]), None)

    if not track:
        message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–∫–∏ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."
        await chat.reply_text(message)
        await menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    context.user_data["current_track"] = track

    keyboard = [
        [InlineKeyboardButton("üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="like"), InlineKeyboardButton("üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="dislike")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    if edit_message:
        media = InputMediaPhoto(media=track["cover"], caption=f"üé∂ *{track['title']}* ‚Äî *{track['artist']}*\n–°–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∏–∂–µ.", parse_mode="Markdown")
        await chat.edit_media(media, reply_markup=reply_markup)
    else:
        sent_message = await chat.reply_photo(
            photo=track["cover"],
            caption=f"üé∂ *{track['title']}* ‚Äî *{track['artist']}*\n–°–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        context.user_data.setdefault("session_messages", []).append(sent_message.message_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_audio_message" in context.user_data:
        try:
            await context.user_data["last_audio_message"].delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    audio_title = f"(snippet) {track['title']} - {track['artist']}"
    audio_message = await chat.reply_audio(audio=track["snippet"], title=audio_title)
    context.user_data["last_audio_message"] = audio_message

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å" –∏ "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"
async def handle_like_dislike(update: Update, context: CallbackContext):
    query = update.callback_query
    track = context.user_data.get("current_track")

    await query.answer()
    if query.data == "like":
        keyboard = [
            [InlineKeyboardButton("Spotify", callback_data="spotify")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–∫: *{track['title']}*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "dislike":
        await get_recommendation(update, context, edit_message=True)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
async def send_track_link(update: Update, context: CallbackContext):
    query = update.callback_query
    track = context.user_data.get("current_track")

    await query.answer()

    if query.data == "spotify":
        await delete_first_post(context)

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(f"–°–ª—É—à–∞–π—Ç–µ —Ç—Ä–µ–∫ –Ω–∞ Spotify: {track['spotify']}", reply_markup=reply_markup)
    elif query.data == "continue":
        print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è get_recommendation...")
        await clear_session_messages(context)
        await get_recommendation(update, context, edit_message=False)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–ª–æ–∂–∫–æ–π –∏ —Å–Ω–∏–ø–ø–µ—Ç–æ–º
async def delete_first_post(context: CallbackContext):
    if "session_messages" in context.user_data and context.user_data["session_messages"]:
        message_id = context.user_data["session_messages"].pop(0)
        try:
            await context.bot.delete_message(chat_id=context.user_data["chat_id"], message_id=message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
async def clear_session_messages(context: CallbackContext):
    if "session_messages" in context.user_data:
        for message_id in context.user_data["session_messages"]:
            try:
                await context.bot.delete_message(chat_id=context.user_data["chat_id"], message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        context.user_data["session_messages"] = []